{"ast":null,"code":"import { ALL_MODULES } from '../data/nav';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./usage.service\";\nexport class SuggestionService {\n  constructor(usage) {\n    this.usage = usage;\n    this.HALF_LIFE_DAYS = 7;\n  }\n  recencyFactor(lastUsed) {\n    const now = Date.now();\n    const dt = Math.max(0, now - lastUsed);\n    const halfLifeMs = this.HALF_LIFE_DAYS * 24 * 60 * 60 * 1000;\n    return Math.exp(-dt / halfLifeMs * Math.LN2);\n  }\n  countsMinMax(records) {\n    let min = Infinity,\n      max = -Infinity;\n    for (const r of records) {\n      min = Math.min(min, r.count);\n      max = Math.max(max, r.count);\n    }\n    if (!isFinite(min)) min = 0;\n    if (!isFinite(max)) max = 0;\n    return {\n      min,\n      max\n    };\n  }\n  normalizeCount(count, min, max) {\n    if (max === min) return count > 0 ? 1 : 0;\n    return (count - min) / (max - min);\n  }\n  rank(currentContext, limit, query) {\n    const usage = this.usage.getAll();\n    const map = new Map(usage.map(u => [u.moduleId, u]));\n    const {\n      min,\n      max\n    } = this.countsMinMax(usage);\n    const rows = [];\n    for (const m of ALL_MODULES) {\n      const u = map.get(m.id);\n      const countNorm = this.normalizeCount(u?.count ?? 0, min, max);\n      const rec = u ? this.recencyFactor(u.lastUsed) : 0;\n      const ctxFit = currentContext && u?.contexts[currentContext] ? u.contexts[currentContext] / (u.count || 1) : 0;\n      let qBoost = 0;\n      if (query && query.trim()) {\n        const q = query.toLowerCase();\n        const hay = [m.name, m.category, m.subcategory, ...(m.tags ?? [])].join(' ').toLowerCase();\n        if (hay.includes(q)) qBoost = 0.15;\n      }\n      const score = countNorm * 0.7 + rec * 0.2 + ctxFit * 0.1 + qBoost;\n      rows.push({\n        mod: m,\n        score\n      });\n    }\n    rows.sort((a, b) => b.score - a.score);\n    return typeof limit === 'number' ? rows.slice(0, limit) : rows;\n  }\n  static {\n    this.ɵfac = function SuggestionService_Factory(t) {\n      return new (t || SuggestionService)(i0.ɵɵinject(i1.UsageService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SuggestionService,\n      factory: SuggestionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ALL_MODULES","SuggestionService","constructor","usage","HALF_LIFE_DAYS","recencyFactor","lastUsed","now","Date","dt","Math","max","halfLifeMs","exp","LN2","countsMinMax","records","min","Infinity","r","count","isFinite","normalizeCount","rank","currentContext","limit","query","getAll","map","Map","u","moduleId","rows","m","get","id","countNorm","rec","ctxFit","contexts","qBoost","trim","q","toLowerCase","hay","name","category","subcategory","tags","join","includes","score","push","mod","sort","a","b","slice","i0","ɵɵinject","i1","UsageService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\hardik\\Downloads\\smart-suggest-pro-full\\src\\app\\services\\suggestion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { UsageService } from './usage.service';\nimport { ALL_MODULES } from '../data/nav';\nimport { UsageRecord } from '../models';\nimport type { ModuleNode } from '../data/nav';\n\n@Injectable({ providedIn: 'root' })\nexport class SuggestionService {\n  private HALF_LIFE_DAYS = 7;\n\n  constructor(private usage: UsageService) {}\n\n  private recencyFactor(lastUsed: number): number {\n    const now = Date.now();\n    const dt = Math.max(0, now - lastUsed);\n    const halfLifeMs = this.HALF_LIFE_DAYS * 24 * 60 * 60 * 1000;\n    return Math.exp(-dt / halfLifeMs * Math.LN2);\n  }\n\n  private countsMinMax(records: UsageRecord[]) {\n    let min = Infinity, max = -Infinity;\n    for (const r of records) { min = Math.min(min, r.count); max = Math.max(max, r.count); }\n    if (!isFinite(min)) min = 0;\n    if (!isFinite(max)) max = 0;\n    return { min, max };\n  }\n\n  private normalizeCount(count: number, min: number, max: number): number {\n    if (max === min) return count > 0 ? 1 : 0;\n    return (count - min) / (max - min);\n  }\n\n  rank(currentContext?: string, limit?: number, query?: string): Array<{mod: any, score: number}> {\n    const usage = this.usage.getAll();\n    const map = new Map(usage.map(u => [u.moduleId, u]));\n    const { min, max } = this.countsMinMax(usage);\n    const rows: Array<{mod: any, score: number}> = [];\n\n    for (const m of ALL_MODULES) {\n      const u = map.get(m.id);\n      const countNorm = this.normalizeCount(u?.count ?? 0, min, max);\n      const rec = u ? this.recencyFactor(u.lastUsed) : 0;\n      const ctxFit = (currentContext && u?.contexts[currentContext]) ? (u.contexts[currentContext] / (u.count || 1)) : 0;\n      let qBoost = 0;\n      if (query && query.trim()) {\n        const q = query.toLowerCase();\n        const hay = [m.name, m.category, m.subcategory, ...(m.tags ?? [])].join(' ').toLowerCase();\n        if (hay.includes(q)) qBoost = 0.15;\n      }\n      const score = (countNorm * 0.7) + (rec * 0.2) + (ctxFit * 0.1) + qBoost;\n      rows.push({ mod: m, score });\n    }\n\n    rows.sort((a,b) => b.score - a.score);\n    return typeof limit === 'number' ? rows.slice(0, limit) : rows;\n  }\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,aAAa;;;AAKzC,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,KAAmB;IAAnB,KAAAA,KAAK,GAALA,KAAK;IAFjB,KAAAC,cAAc,GAAG,CAAC;EAEgB;EAElCC,aAAaA,CAACC,QAAgB;IACpC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE;IACtB,MAAME,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,GAAG,GAAGD,QAAQ,CAAC;IACtC,MAAMM,UAAU,GAAG,IAAI,CAACR,cAAc,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IAC5D,OAAOM,IAAI,CAACG,GAAG,CAAC,CAACJ,EAAE,GAAGG,UAAU,GAAGF,IAAI,CAACI,GAAG,CAAC;EAC9C;EAEQC,YAAYA,CAACC,OAAsB;IACzC,IAAIC,GAAG,GAAGC,QAAQ;MAAEP,GAAG,GAAG,CAACO,QAAQ;IACnC,KAAK,MAAMC,CAAC,IAAIH,OAAO,EAAE;MAAEC,GAAG,GAAGP,IAAI,CAACO,GAAG,CAACA,GAAG,EAAEE,CAAC,CAACC,KAAK,CAAC;MAAET,GAAG,GAAGD,IAAI,CAACC,GAAG,CAACA,GAAG,EAAEQ,CAAC,CAACC,KAAK,CAAC;IAAE;IACvF,IAAI,CAACC,QAAQ,CAACJ,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC;IAC3B,IAAI,CAACI,QAAQ,CAACV,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC;IAC3B,OAAO;MAAEM,GAAG;MAAEN;IAAG,CAAE;EACrB;EAEQW,cAAcA,CAACF,KAAa,EAAEH,GAAW,EAAEN,GAAW;IAC5D,IAAIA,GAAG,KAAKM,GAAG,EAAE,OAAOG,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACzC,OAAO,CAACA,KAAK,GAAGH,GAAG,KAAKN,GAAG,GAAGM,GAAG,CAAC;EACpC;EAEAM,IAAIA,CAACC,cAAuB,EAAEC,KAAc,EAAEC,KAAc;IAC1D,MAAMvB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACwB,MAAM,EAAE;IACjC,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC1B,KAAK,CAACyB,GAAG,CAACE,CAAC,IAAI,CAACA,CAAC,CAACC,QAAQ,EAAED,CAAC,CAAC,CAAC,CAAC;IACpD,MAAM;MAAEb,GAAG;MAAEN;IAAG,CAAE,GAAG,IAAI,CAACI,YAAY,CAACZ,KAAK,CAAC;IAC7C,MAAM6B,IAAI,GAAqC,EAAE;IAEjD,KAAK,MAAMC,CAAC,IAAIjC,WAAW,EAAE;MAC3B,MAAM8B,CAAC,GAAGF,GAAG,CAACM,GAAG,CAACD,CAAC,CAACE,EAAE,CAAC;MACvB,MAAMC,SAAS,GAAG,IAAI,CAACd,cAAc,CAACQ,CAAC,EAAEV,KAAK,IAAI,CAAC,EAAEH,GAAG,EAAEN,GAAG,CAAC;MAC9D,MAAM0B,GAAG,GAAGP,CAAC,GAAG,IAAI,CAACzB,aAAa,CAACyB,CAAC,CAACxB,QAAQ,CAAC,GAAG,CAAC;MAClD,MAAMgC,MAAM,GAAId,cAAc,IAAIM,CAAC,EAAES,QAAQ,CAACf,cAAc,CAAC,GAAKM,CAAC,CAACS,QAAQ,CAACf,cAAc,CAAC,IAAIM,CAAC,CAACV,KAAK,IAAI,CAAC,CAAC,GAAI,CAAC;MAClH,IAAIoB,MAAM,GAAG,CAAC;MACd,IAAId,KAAK,IAAIA,KAAK,CAACe,IAAI,EAAE,EAAE;QACzB,MAAMC,CAAC,GAAGhB,KAAK,CAACiB,WAAW,EAAE;QAC7B,MAAMC,GAAG,GAAG,CAACX,CAAC,CAACY,IAAI,EAAEZ,CAAC,CAACa,QAAQ,EAAEb,CAAC,CAACc,WAAW,EAAE,IAAId,CAAC,CAACe,IAAI,IAAI,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACN,WAAW,EAAE;QAC1F,IAAIC,GAAG,CAACM,QAAQ,CAACR,CAAC,CAAC,EAAEF,MAAM,GAAG,IAAI;MACpC;MACA,MAAMW,KAAK,GAAIf,SAAS,GAAG,GAAG,GAAKC,GAAG,GAAG,GAAI,GAAIC,MAAM,GAAG,GAAI,GAAGE,MAAM;MACvER,IAAI,CAACoB,IAAI,CAAC;QAAEC,GAAG,EAAEpB,CAAC;QAAEkB;MAAK,CAAE,CAAC;IAC9B;IAEAnB,IAAI,CAACsB,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAKA,CAAC,CAACL,KAAK,GAAGI,CAAC,CAACJ,KAAK,CAAC;IACrC,OAAO,OAAO1B,KAAK,KAAK,QAAQ,GAAGO,IAAI,CAACyB,KAAK,CAAC,CAAC,EAAEhC,KAAK,CAAC,GAAGO,IAAI;EAChE;;;uBAhDW/B,iBAAiB,EAAAyD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;IAAA;EAAA;;;aAAjB5D,iBAAiB;MAAA6D,OAAA,EAAjB7D,iBAAiB,CAAA8D,IAAA;MAAAC,UAAA,EADJ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}